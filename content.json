[{"title":"input的placeholder打字效果的实现","date":"2017-03-17T07:35:20.000Z","path":"2017/03/17/placeholder/","text":"看到一个轻量级js插件,蛮有意思的.(主要是上次出去面试,第四轮架构师大神,问的问题其实很基本,但是自己就是没答上来,真的挺可惜,不过面试题目还像也可以写一篇分享一下==…建议我多去看看github上的各位大牛的代码,学习吧骚年) 源码地址superplaceholder.js: github 1. 打字效果实现原理模拟打字效果的实现,其实就是主要是定时器的工作了,只要根据提供的texts(placeholder值的数组),textDelay(切换句子时的时间间隔),letterDelay(每打一个字的时间间隔),定时给input元素setAttribute placeholder属性. 还要考虑到是否聚焦startOnFocus的时候开始执行该打字效果,是否循环loop,以及打字光标cursor. 2. Start检查input是否支持placeholder属性123//创建一个input元素,判断是否支持placeholder属性var test = document.createElement('input');var isPlaceHolderSupported = ('placeholder' in test); 构造方法定义默认参数123456789//默认参数optionsvar defaults = &#123; letterDelay: 100, //每个字显示的时间间隔 textDelay: 1000, //句子切换时间间隔 loop: false, //是否循环显示 startOnFocus: true, //获取焦点,显示打字效果 showCursor: true, //显示打字效果光标 cursor: '|' //光标&#125; 构造PlaceHolder方法123456789//构造一个PlaceHolder方法 options里没有设置的属性就使用默认的function PlaceHolder(el, texts, options)&#123; this.el = el; this.texts = texts; options = options || &#123;&#125;; this.options = extend(defaults, options); this.timeouts = []; this.begin();&#125; 关于这里的extend函数,主要是将自定义参数值与默认参数值整合,返回的一个参数对象1234567function extend(obj1, obj2)&#123; var obj = &#123;&#125;; for(key in obj1)&#123; obj[key] = obj2[key]===undefined ? obj1[key] : obj2[key]; &#125; return obj;&#125; 构造函数的原型及方法这里先说明一下,需要的方法有:begin()初始化,设置打印texts的定时器和打印text里的每个字符的定时器,以及失去焦点时清除所有定时器cleanUp()1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//初始化开始PlaceHolder.prototype.begin = function()&#123; var self = this, temp; //初始时placeholder的值 self.originalPlaceholder = self.el.getAttribute('placeholder'); //初始化后直接开始打字效果显示placeholder or 需要手动聚焦开始或者停止 if(self.options.startOnFocus)&#123; self.el.addEventListener('focus', function()&#123; self.processText(0); &#125;); self.el.addEventListener('blur', function()&#123; self.cleanUp(); &#125;) &#125;else&#123; self.processText(0); &#125;&#125;//textsPlaceHolder.prototype.processText = function(index)&#123; var self = this, timeout; self.typeString(self.texts[index], function()&#123; //typeString显示完一个短句,再回调,设置下一个短句的定时显示 timeout = setTimeout(function()&#123; self.processText(self.options.loop ? ((index + 1) % self.texts.length) : (index + 1)); &#125;, self.options.textDelay); self.timeouts.push(timeout); &#125;);&#125;//textPlaceHolder.prototype.typeString = function(str, callback)&#123; var self = this, timeout; if(!str)&#123; return false; &#125; //给每增加一个字符显示设置定时,即每增加一个letterDelay, 调用函数给input的placeholder设置对应的str for(let i = 0; i &lt; str.length; i++)&#123; timeout = setTimeout(setTimeoutCallback, i * self.options.letterDelay, i); self.timeouts.push(timeout); &#125; // function setTimeoutCallback(index)&#123; //index == str.length - 1 便是显示到了一个text的最后的一个字符 self.el.setAttribute('placeholder', str.substring(0, index + 1) + (index === str.length - 1 || !self.options.showCursor ? '' : self.options.cursor)); if(index == str.length - 1)&#123; callback(); //一个text显示完整后,回调,设置下一个text的 &#125; &#125;&#125;//失去焦点之后触发,设置为原来的默认值, 并且清空定时器PlaceHolder.prototype.cleanUp = function()&#123; // Stop timeouts for (var i = this.timeouts.length; i--;) &#123; clearTimeout(this.timeouts[i]); &#125; this.el.setAttribute('placeholder', this.originalPlaceholder); this.timeouts.length = 0;&#125; 声明PlaceHolder对象函数,判断是否支持placeholder属性,并new之前的构造函数, 并抛出该函数对象1234567891011121314151617181920var splaceholder = function(params)&#123; if(!isPlaceHolderSupported)&#123; return; &#125; new PlaceHolder(params.el, params.texts, params.options);&#125;if( typeof exports === 'object' ) &#123; module.exports = splaceholder;&#125;// AMD moduleelse if( typeof define === 'function' &amp;&amp; define.amd ) &#123; define(function () &#123; return splaceholder; &#125;);&#125;// 浏览器window对象else &#123; window.splaceholder = splaceholder;&#125; 好的,接下来我们只要在页面调用就好了1234567891011&lt;input type=\"text\" name=\"\" placeholder=\"colleague\" id=\"colleague\"&gt;splaceholder(&#123; el: colleague, texts: [\"caishuanglin\", \"linxianshen\", \"xinmencai\"], options: &#123; loop: true, letterDelay: 100, startOnFocus: false &#125;&#125;) 嗯,自己动手试试吧.(ง •̀_•́)ง","tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"Hello World","date":"2017-03-16T09:04:57.000Z","path":"2017/03/16/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]