<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CSL&#39;S BLOG</title>
  <subtitle>Thinking will not overcome fear but action will.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linxianshen.github.io/"/>
  <updated>2017-04-13T08:49:34.000Z</updated>
  <id>https://linxianshen.github.io/</id>
  
  <author>
    <name>蔡双临</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>input输入框校对气泡插件的实现</title>
    <link href="https://linxianshen.github.io/2017/04/13/inputtip/"/>
    <id>https://linxianshen.github.io/2017/04/13/inputtip/</id>
    <published>2017-04-13T04:00:41.000Z</published>
    <updated>2017-04-13T08:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>啊…这是上次清明回家上网买车票是看到的一个input显示插件,感觉比较常用的.实现起来也不难, 就想着抽空也来写一个类似的气泡弹框插件.</p>
<p>清明到现在也鸽了这么久了, 找了个时间现在来分享一下实现的步骤…</p>
<p>代码在这:<a href="https://github.com/linxianshen/inputtip" target="_blank" rel="external">github</a></p>
<a id="more"></a>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>思路类似. 参考之前的placeholder属性打字效果<strong>superplaceholder</strong>: <a href="https://linxianshen.github.io/2017/03/17/placeholder/">传送门</a></p>
<p>整体的思路也就是前端调用tipInput()方法去生成一个气泡Div, 并且要相对需要此功能的input的种种属性.</p>
<p>因此在这里就直接将input的id作为参数, 调用气泡生成的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tipInput(&#123;el: tip&#125;)  //tip为input的id</div></pre></td></tr></table></figure></p>
<p>校验传的参数是否input元素并且是text属性的输入框<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var tipInput = <span class="keyword">function</span>(params) &#123;</div><div class="line">    <span class="keyword">if</span> (params.el.tagName == <span class="string">'INPUT'</span> &amp;&amp; params.el.type == <span class="string">'text'</span>) &#123; //判断元素是否为input text的</div><div class="line">        new InputTip(params.el);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来的操作基本都是对获取到的input#tip元素的属性的应用<br><img src="https://github.com/linxianshen/linxianshen.github.io/blob/master/img/el.jpeg" alt="input"></p>
<hr>
<p>在createTipDiv方法中,主要的操作就是, 动态生成tipwrap内容节点, 并赋予宽高, 定位等属性.<br>在创建成功之后,为input添加focus, blur以及keyup键盘事件, 来控制tipwrap的显示与否</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> InputTip(el) &#123;</div><div class="line">    this.el = el;</div><div class="line">    this.createTipDiv();   //create the tip based on input elem </div><div class="line">&#125;</div><div class="line"></div><div class="line">//create tipwrap div</div><div class="line">InputTip.prototype.createTipDiv = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">let</span> self = this;</div><div class="line">    <span class="built_in">let</span> elem = document.createElement(<span class="string">"div"</span>);</div><div class="line">    elem.id = <span class="string">'tipwrap'</span>;</div><div class="line">    elem.style = <span class="string">'position: absolute;color: black;top:'</span> + (self.el.offsetTop - self.el.clientHeight - 14) + <span class="string">'px;left:'</span> + self.el.offsetLeft + <span class="string">'px;'</span>;</div><div class="line">    elem.hidden = <span class="literal">true</span>; //begin hidden</div><div class="line">    elem.innerHTML = <span class="string">"&lt;div id='rect' style='background: #eee;border-radius: 4px;padding: 4px;font-size:"</span> + (self.el.size + 2) + <span class="string">"px;height:"</span> + self.el.clientHeight + <span class="string">"px;min-width:"</span> + self.el.clientWidth + <span class="string">"px;'&gt;&lt;/div&gt;&lt;span id='triangle' style='display: block;margin-left:"</span> + (self.el.clientWidth / 10) + <span class="string">"px;width: 0;height: 0;border-left: 5px solid transparent;border-right: 5px solid transparent;border-top: 5px solid #eee;'&gt;&lt;/span&gt;"</span>;</div><div class="line">    self.el.parentElement.appendChild(elem);</div><div class="line">    self.el.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (self.el.value) &#123;</div><div class="line">            elem.hidden = <span class="literal">false</span>;   //show tipwrap</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    self.el.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        elem.hidden = <span class="literal">true</span>;   // hide tipwrap</div><div class="line">    &#125;);</div><div class="line">    self.el.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        self.textShowRealTime(elem); //show <span class="keyword">in</span> time </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>input的keyup事件, 就是每次按下都去重新给气泡上的内容赋值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//show <span class="keyword">in</span> time when keyup event</div><div class="line">InputTip.prototype.textShowRealTime = <span class="keyword">function</span>(elem) &#123;</div><div class="line">    <span class="built_in">let</span> self = this;</div><div class="line">    <span class="built_in">let</span> tipNode = document.getElementById(<span class="string">"triangle"</span>);</div><div class="line">    <span class="keyword">if</span> (self.el.value) &#123;</div><div class="line">        elem.hidden = <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        elem.hidden = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    elem.children[0].innerHTML = self.el.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/linxianshen/linxianshen.github.io/blob/master/img/inputtip.gif" alt="效果"></p>
<p>跟头像一样丑是丑了点, 客官将就看看吧…</p>
<p>哦, 还有, 剧透一下人民的名义, o(*≧▽≦)ツ┏━┓铁胆神侯朱无视才是最大boss.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;啊…这是上次清明回家上网买车票是看到的一个input显示插件,感觉比较常用的.实现起来也不难, 就想着抽空也来写一个类似的气泡弹框插件.&lt;/p&gt;
&lt;p&gt;清明到现在也鸽了这么久了, 找了个时间现在来分享一下实现的步骤…&lt;/p&gt;
&lt;p&gt;代码在这:&lt;a href=&quot;https://github.com/linxianshen/inputtip&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://linxianshen.github.io/tags/javaScript/"/>
    
      <category term="input" scheme="https://linxianshen.github.io/tags/input/"/>
    
      <category term="气泡" scheme="https://linxianshen.github.io/tags/%E6%B0%94%E6%B3%A1/"/>
    
      <category term="plugin" scheme="https://linxianshen.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore配置</title>
    <link href="https://linxianshen.github.io/2017/04/08/gitignore/"/>
    <id>https://linxianshen.github.io/2017/04/08/gitignore/</id>
    <published>2017-04-08T09:08:06.000Z</published>
    <updated>2017-04-08T06:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候你必须把某些文件放到Git工作目录当中, 但是又不能提交他们.</p>
<p>当然Git也为了我们提供了解决方法, 我们可以在git工作区的根目录下,创建一个特殊的.gitignore文件, 然后讲我们要忽略的文件名填进去, Git就会自动忽略这些文件</p>
<a id="more"></a>
<p>忽略文件的原则:</p>
<blockquote>
<p><strong>1:</strong> 忽略操作系统自动生成的文件，比如缩略图等;<br>  <strong>2:</strong> 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。<br>  <strong>3:</strong> 忽略某些通过某些文件自动生成的, 那么自动生成的文件就没必要放进版本库</p>
</blockquote>
<p>比如一些在工作目录中的安装的依赖模块, 是根据package.json来生成的, 就没必要放入版本库</p>
<p>进入项目文件, touch .gitignore创建文件</p>
<p>并进行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">node-modules/</div><div class="line">*.py          //表示忽略所有py文件, *通配多个字符</div><div class="line">fold/         //表示 fold文件夹下的所有文件都忽略, 这个fold文件夹不管是在根目录下,还是某个文件夹的子目录下,都会被忽略</div><div class="line"></div><div class="line">/fold/        //表示根目录下的fold目录的全部内容</div><div class="line"></div><div class="line">/*</div><div class="line">!/fold        //表示忽略全部内容, 不忽略根目录下的fold文件夹</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些时候你必须把某些文件放到Git工作目录当中, 但是又不能提交他们.&lt;/p&gt;
&lt;p&gt;当然Git也为了我们提供了解决方法, 我们可以在git工作区的根目录下,创建一个特殊的.gitignore文件, 然后讲我们要忽略的文件名填进去, Git就会自动忽略这些文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://linxianshen.github.io/tags/git/"/>
    
      <category term=".gitignore" scheme="https://linxianshen.github.io/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>Git命令操作-上传文件到github仓库</title>
    <link href="https://linxianshen.github.io/2017/04/07/gitcommand/"/>
    <id>https://linxianshen.github.io/2017/04/07/gitcommand/</id>
    <published>2017-04-07T06:17:41.000Z</published>
    <updated>2017-04-07T06:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个coder, 熟练使用git命令是必须的, 你既可以在github上寻找对你有帮助的开源项目, 也可以将自己的代码共享开源出去.<br>那么如何将本地的项目文件上传至github上呢.</p>
<p>如果是首次上传项目文件则:<br>先进入文件夹, 通过git init把这个目录变成git可以管理的仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>把文件添加到版本库中, 使用git add .命令, 不要忘了’.’, 意思是添加文件夹下的所有文件到暂存区里<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p>
<p>用命令git commit告诉Git把文件提交到仓库, 引号里面的是提交说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">'提交上传备注说明'</span></div></pre></td></tr></table></figure></p>
<p>关联到远程库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin 远程库地址</div></pre></td></tr></table></figure></p>
<p>获取远程库与本地同步合并(如果远程库不为空, 则必须做这一步, 否则后面会提交失败)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull --rebase origin master</div></pre></td></tr></table></figure></p>
<p>本地库内容推送到远程, 使用git push命令,实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<hr>
<p>在上传完项目,之后又修改了,并且再上传需要的git命令</p>
<p>查看项目文件状态,提示了本地修改了哪些文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p>把新增修改的文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add -A</div></pre></td></tr></table></figure></p>
<p>添加备注git commit -m “备注说明”<br>更新git pull –rebase origin master<br>上传git push -u origin master</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个coder, 熟练使用git命令是必须的, 你既可以在github上寻找对你有帮助的开源项目, 也可以将自己的代码共享开源出去.&lt;br&gt;那么如何将本地的项目文件上传至github上呢.&lt;/p&gt;
&lt;p&gt;如果是首次上传项目文件则:&lt;br&gt;先进入文件夹, 通过git init把这个目录变成git可以管理的仓库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git命令" scheme="https://linxianshen.github.io/tags/git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>js生成网页pdf或打印的方法</title>
    <link href="https://linxianshen.github.io/2017/03/27/printpdf/"/>
    <id>https://linxianshen.github.io/2017/03/27/printpdf/</id>
    <published>2017-03-27T08:59:41.000Z</published>
    <updated>2017-03-27T10:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器网页中点击鼠标右键, 有打印操作, 但是这样会把整个网页的内容都包含到pdf里面.<br>现在有个需求, 就是要将网页中的某一块div里面的内容生成pdf, 另存为或者打印.</p>
<a id="more"></a>
<p>好.直接上代码吧.主要就是js的document对象的使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var createPdf = () =&gt; &#123;</div><div class="line">	<span class="built_in">let</span> newWindow = window.open(<span class="string">"_blank"</span>);   //打开新窗口</div><div class="line">	<span class="built_in">let</span> codestr = document.getElementById(<span class="string">"pdf-wrap"</span>).innerHTML;   //获取需要生成pdf页面的div代码</div><div class="line">    newWindow.document.write(codestr);   //向文档写入HTML表达式或者JavaScript代码</div><div class="line">    newWindow.document.close();     //关闭document的输出流, 显示选定的数据</div><div class="line">    newWindow.print();   //打印当前窗口</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用成功会弹出打印或保存pdf的窗口<br><img src="/img/createpdf.png" alt="调用成功"></p>
<p>打印的文档可以自由拼接…自己去网页上瞎jb存pdf吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器网页中点击鼠标右键, 有打印操作, 但是这样会把整个网页的内容都包含到pdf里面.&lt;br&gt;现在有个需求, 就是要将网页中的某一块div里面的内容生成pdf, 另存为或者打印.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://linxianshen.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>nodejs定时调用阿里云天气api</title>
    <link href="https://linxianshen.github.io/2017/03/22/weatherapi/"/>
    <id>https://linxianshen.github.io/2017/03/22/weatherapi/</id>
    <published>2017-03-22T11:31:09.000Z</published>
    <updated>2017-03-27T08:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取天气nodejs接口在实际开发中需要定时调用,在此处需要安装node-schedule定时模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install node-schedule</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var url = <span class="string">'http://saweather.market.alicloudapi.com/gps-to-weather'</span>;</div><div class="line">var params = &#123;  //还有一些可选参数,参照api</div><div class="line">    from: 5,</div><div class="line">    needAlarm: 1,</div><div class="line">    needIndex: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>阿里云天气预报api</strong>: <a href="https://market.aliyun.com/products/?keyword=%E5%A4%A9%E6%B0%94&amp;c=m#ymk=%7B%22keywords%22:%22%E5%A4%A9%E6%B0%94%22,%22pageIndex%22:1,%22pageSize%22:10,%22saleMode%22:0,%22categoryId%22:%22%22%7D" target="_blank" rel="external">click</a><br>注册登录购买免费版,会提供给你一个AppKey, AppSecret和AppCode,用于请求验证,注意是放在头部headers内的(别拼接到了url里==)</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Super Agent/0.0.1'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">    <span class="string">'Authorization'</span>: <span class="string">'APPCODE '</span> + <span class="string">'your appcode'</span>    //填写你自己的appcode</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ok! 参数请求参数都有了, 现在就只要给请求设置一个定时任务了, 我在这里使用了node-schedule这个模块, 当然你也可以自己写定时器, 功能还是都能实现的.<br>在实际开发中, 遇到需要定时任务的工作还是蛮多的, 比如: 定时发送消息, 导出or清除数据, 定时请求api等等.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var schedule = require(<span class="string">'node-schedule'</span>);</div><div class="line">var request = require(<span class="string">'request'</span>);</div><div class="line">schedule.scheduleJob(<span class="string">'30 30 * * * *'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var options = &#123;</div><div class="line">    	url: url,</div><div class="line">        method: <span class="string">'GET'</span>,</div><div class="line">        headers: headers,  //请求头</div><div class="line">        qs: params  //请求参数</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//Start the request</div><div class="line">	request(options, <span class="keyword">function</span>(error, response, body) &#123;</div><div class="line">		<span class="keyword">if</span>(error)&#123;</div><div class="line"></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			//api调用成功后的操作</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>以上的6个占位符从左到右分别代表：秒、分、时、日、月、周几, 上述例子中就是每个小时的30分30秒回执行一次.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//范围触发</div><div class="line">schedule.scheduleJob(<span class="string">'1-30 * * * * *'</span>, <span class="function"><span class="title">function</span></span>()&#123;  //表示每分钟的1~30秒都会执行</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">second</div><div class="line">minute</div><div class="line">hour</div><div class="line">date</div><div class="line">month</div><div class="line">year</div><div class="line">dayOfWeek</div><div class="line">*/</div><div class="line">//对象文本定义触发条件</div><div class="line">schedule.scheduleJob(&#123;hour: 14, minute: 30, dayOfWeek: 1&#125;, <span class="function"><span class="title">function</span></span>()&#123;  // 每周一下午14时30分执行</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>还有好几种设置的方式,自己摸索吧.</p>
<p>node-schedule: <a href="https://github.com/node-schedule/node-schedule" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取天气nodejs接口在实际开发中需要定时调用,在此处需要安装node-schedule定时模块&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo npm install node-schedule&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var url = &lt;span class=&quot;string&quot;&gt;&#39;http://saweather.market.alicloudapi.com/gps-to-weather&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var params = &amp;#123;  //还有一些可选参数,参照api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    from: 5,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    needAlarm: 1,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    needIndex: 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;阿里云天气预报api&lt;/strong&gt;: &lt;a href=&quot;https://market.aliyun.com/products/?keyword=%E5%A4%A9%E6%B0%94&amp;amp;c=m#ymk=%7B%22keywords%22:%22%E5%A4%A9%E6%B0%94%22,%22pageIndex%22:1,%22pageSize%22:10,%22saleMode%22:0,%22categoryId%22:%22%22%7D&quot;&gt;click&lt;/a&gt;&lt;br&gt;注册登录购买免费版,会提供给你一个AppKey, AppSecret和AppCode,用于请求验证,注意是放在头部headers内的(别拼接到了url里==)&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://linxianshen.github.io/tags/javaScript/"/>
    
      <category term="nodejs" scheme="https://linxianshen.github.io/tags/nodejs/"/>
    
      <category term="node-schedule" scheme="https://linxianshen.github.io/tags/node-schedule/"/>
    
      <category term="天气" scheme="https://linxianshen.github.io/tags/%E5%A4%A9%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>数组中元素前后(上下)移动函数</title>
    <link href="https://linxianshen.github.io/2017/03/21/swapItems/"/>
    <id>https://linxianshen.github.io/2017/03/21/swapItems/</id>
    <published>2017-03-21T08:57:54.000Z</published>
    <updated>2017-03-21T09:16:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组内元素交换"><a href="#数组内元素交换" class="headerlink" title="数组内元素交换"></a>数组内元素交换</h2><p>在使用angular或vue时, ng-repeat和v-for都能很方便得到遍历的数组中的某个元素的$index, 本文以在angular下为例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var swapItems = <span class="keyword">function</span>(arr, index1, index2) &#123;</div><div class="line">  arr[index1] = arr.splice(index2, 1, arr[index1])[0];</div><div class="line">  <span class="built_in">return</span> arr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该函数使得index1,index2两位置的元素交换</p>
<a id="more"></a>
<h2 id="元素上移或下移"><a href="#元素上移或下移" class="headerlink" title="元素上移或下移"></a>元素上移或下移</h2><p>上移即将 选中元素与上一个元素交换位置,注意边界<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$scope</span>.upMove = <span class="keyword">function</span>(arr, <span class="variable">$index</span>) &#123;</div><div class="line">  <span class="keyword">if</span>(<span class="variable">$index</span> == 0) &#123;</div><div class="line">  	<span class="built_in">return</span>;</div><div class="line">  &#125;</div><div class="line">  swapItems(arr, <span class="variable">$index</span>, <span class="variable">$index</span> - 1);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>同理 下移即将 选中元素与下一个元素交换位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$scope</span>.downMove = <span class="keyword">function</span>(arr, <span class="variable">$index</span>) &#123;</div><div class="line">  <span class="keyword">if</span>(<span class="variable">$index</span> == arr.length -1) &#123;</div><div class="line">  	<span class="built_in">return</span>;</div><div class="line">  &#125;</div><div class="line">  swapItems(arr, <span class="variable">$index</span>, <span class="variable">$index</span> + 1);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组内元素交换&quot;&gt;&lt;a href=&quot;#数组内元素交换&quot; class=&quot;headerlink&quot; title=&quot;数组内元素交换&quot;&gt;&lt;/a&gt;数组内元素交换&lt;/h2&gt;&lt;p&gt;在使用angular或vue时, ng-repeat和v-for都能很方便得到遍历的数组中的某个元素的$index, 本文以在angular下为例:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var swapItems = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(arr, index1, index2) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arr[index1] = arr.splice(index2, 1, arr[index1])[0];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; arr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数使得index1,index2两位置的元素交换&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://linxianshen.github.io/tags/javaScript/"/>
    
      <category term="angular" scheme="https://linxianshen.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题(持续更新)</title>
    <link href="https://linxianshen.github.io/2017/03/18/interviewques/"/>
    <id>https://linxianshen.github.io/2017/03/18/interviewques/</id>
    <published>2017-03-18T02:41:39.000Z</published>
    <updated>2017-03-21T08:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>孔夫子曰:</strong> 学而时习之,不亦乐乎.</p>
</blockquote>
<h2 id="HTML-CSS篇"><a href="#HTML-CSS篇" class="headerlink" title="HTML+CSS篇"></a>HTML+CSS篇</h2><a id="more"></a>
<p><strong>1.</strong> 行内元素,块级元素有哪些?以及CSS的盒子模型又是什么?</p>
<ul>
<li>行内元素: div p h1-h4 ul</li>
<li>块级元素: a b br i span input select</li>
<li>CSS盒子模型: border margin外边距 padding内边距</li>
</ul>
<hr>
<p><strong>2.</strong> 清除<strong>浮动</strong>的几种方式<br>&nbsp;<strong>①.</strong> clear: both<br>&nbsp;<strong>②.</strong> overflow: auto<br>&nbsp;<strong>③.</strong> 使用after伪元素清除浮动</p>
<hr>
<p><strong>3.</strong> CSS<strong>选择器</strong>有哪些?<br>有类别选择器, <em>标签选择器</em>, <em>id选择器</em>, <em>后代选择器</em>(空格), <em>子选择器</em>(&gt;指得是直接后代), <em>伪类选择器</em>(:hover :focus等等), <em>通用选择器</em>(可以跟后代选择器搭配使用,如.father *{father元素后代所有元素都是用这个样式}), <em>群组选择器</em>(元素之间用逗号分隔), <em>相邻同胞选择器</em>, <em>属性选择器</em>(如input[type=”text”])</p>
<hr>
<blockquote>
<p><strong>Tip:</strong> Practice is the sole of criterion of truth. 实践是检验真理的唯一标准.</p>
</blockquote>
<h2 id="JavaScript篇"><a href="#JavaScript篇" class="headerlink" title="JavaScript篇"></a>JavaScript篇</h2><p><strong>1.</strong>寻找字符串中出现次数最少的、并且首次出现位置最前的字符.<br>这里我的思路是先统计字符出现的次数,整理成对象,如a出现1次b出现2次{a: 1, b: 2},再for循环对象,找出出现次数最少并且为之最前的字符.<br>不同的解决方法: <a href="https://segmentfault.com/q/1010000008703575/a-1020000008708596" target="_blank" rel="external">戳</a></p>
<hr>
<p><strong>2.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;孔夫子曰:&lt;/strong&gt; 学而时习之,不亦乐乎.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HTML-CSS篇&quot;&gt;&lt;a href=&quot;#HTML-CSS篇&quot; class=&quot;headerlink&quot; title=&quot;HTML+CSS篇&quot;&gt;&lt;/a&gt;HTML+CSS篇&lt;/h2&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://linxianshen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试题" scheme="https://linxianshen.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>input的placeholder打字效果的实现</title>
    <link href="https://linxianshen.github.io/2017/03/17/placeholder/"/>
    <id>https://linxianshen.github.io/2017/03/17/placeholder/</id>
    <published>2017-03-17T07:35:20.000Z</published>
    <updated>2017-04-13T06:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86   
    src="http://music.163.com/outchain/player?type=2&id=25706282&auto=1&height=66">  
</iframe>  -->
<p>看到一个轻量级js插件,蛮有意思的.(主要是上次出去面试有点受刺激,第四轮架构师大神,问的问题其实很基本,但是自己就是没答上来,真的挺可惜,不过面试题目还像也可以写一篇分享一下==…建议多去看看github上的各位大牛的代码,学习吧骚年)</p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><strong>superplaceholder.js</strong>: <a href="https://github.com/chinchang/superplaceholder.js" target="_blank" rel="external">github</a></p>
<h2 id="1-打字效果实现原理"><a href="#1-打字效果实现原理" class="headerlink" title="1.  打字效果实现原理"></a>1.  打字效果实现原理</h2><p>模拟打字效果的实现,其实就是主要是定时器的工作了,只要根据提供的<strong>texts</strong>(placeholder值的数组),<strong>textDelay</strong>(切换句子时的时间间隔),<strong>letterDelay</strong>(每打一个字的时间间隔),定时给input元素setAttribute <strong>placeholder</strong>属性.</p>
<p>还要考虑到是否聚焦<strong>startOnFocus</strong>的时候开始执行该打字效果,是否循环<strong>loop</strong>,以及打字光标<strong>cursor</strong>.</p>
<a id="more"></a>
<h2 id="2-Start"><a href="#2-Start" class="headerlink" title="2.  Start"></a>2.  Start</h2><h3 id="检查input是否支持placeholder属性"><a href="#检查input是否支持placeholder属性" class="headerlink" title="检查input是否支持placeholder属性"></a>检查input是否支持placeholder属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//创建一个input元素,判断是否支持placeholder属性</div><div class="line">var <span class="built_in">test</span> = document.createElement(<span class="string">'input'</span>);</div><div class="line">var isPlaceHolderSupported = (<span class="string">'placeholder'</span> <span class="keyword">in</span> <span class="built_in">test</span>);</div></pre></td></tr></table></figure>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>定义默认参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//默认参数options</div><div class="line">var defaults = &#123;</div><div class="line">	letterDelay: 100, //每个字显示的时间间隔</div><div class="line">	textDelay: 1000,  //句子切换时间间隔</div><div class="line">	loop: <span class="literal">false</span>,  //是否循环显示</div><div class="line">	startOnFocus: <span class="literal">true</span>, //获取焦点,显示打字效果</div><div class="line">	showCursor: <span class="literal">true</span>,  //显示打字效果光标</div><div class="line">	cursor: <span class="string">'|'</span>  //光标</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>构造PlaceHolder方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//构造一个PlaceHolder方法 options里没有设置的属性就使用默认的</div><div class="line"><span class="keyword">function</span> PlaceHolder(el, texts, options)&#123;</div><div class="line">	this.el = el;</div><div class="line">	this.texts = texts;</div><div class="line">	options = options || &#123;&#125;;</div><div class="line">	this.options = extend(defaults, options);</div><div class="line">	this.timeouts = [];</div><div class="line">	this.begin();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于这里的extend函数,主要是将自定义参数值与默认参数值整合,返回的一个参数对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> extend(obj1, obj2)&#123;</div><div class="line">	var obj = &#123;&#125;;</div><div class="line">	<span class="keyword">for</span>(key <span class="keyword">in</span> obj1)&#123;</div><div class="line">		obj[key] = obj2[key]===undefined ? obj1[key] : obj2[key];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="构造函数的原型及方法"><a href="#构造函数的原型及方法" class="headerlink" title="构造函数的原型及方法"></a>构造函数的原型及方法</h3><p>这里先说明一下,需要的方法有:<br>begin()初始化,<br>设置打印texts的定时器和打印text里的每个字符的定时器,<br>以及失去焦点时清除所有定时器cleanUp()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">//初始化开始</div><div class="line">PlaceHolder.prototype.begin = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	var self = this,</div><div class="line">		temp;</div><div class="line">	//初始时placeholder的值</div><div class="line">	self.originalPlaceholder = self.el.getAttribute(<span class="string">'placeholder'</span>);</div><div class="line"></div><div class="line">	//初始化后直接开始打字效果显示placeholder  or  需要手动聚焦开始或者停止</div><div class="line">	<span class="keyword">if</span>(self.options.startOnFocus)&#123;</div><div class="line">		self.el.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			self.processText(0);		</div><div class="line">		&#125;);</div><div class="line">		self.el.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			self.cleanUp();</div><div class="line">		&#125;)</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		self.processText(0);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//texts</div><div class="line">PlaceHolder.prototype.processText = <span class="keyword">function</span>(index)&#123;</div><div class="line">	var self = this,</div><div class="line">		timeout;</div><div class="line">	self.typeString(self.texts[index], <span class="function"><span class="title">function</span></span>()&#123;    //<span class="built_in">type</span>String显示完一个短句,再回调,设置下一个短句的定时显示</div><div class="line">		timeout = <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			self.processText(self.options.loop ? ((index + 1) % self.texts.length) : (index + 1));</div><div class="line">		&#125;, self.options.textDelay);</div><div class="line">		self.timeouts.push(timeout);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//text</div><div class="line">PlaceHolder.prototype.typeString = <span class="keyword">function</span>(str, callback)&#123;</div><div class="line">	var self = this,</div><div class="line">		timeout;</div><div class="line">	<span class="keyword">if</span>(!str)&#123;</div><div class="line">		<span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//给每增加一个字符显示设置定时,即每增加一个letterDelay, 调用函数给input的placeholder设置对应的str</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i &lt; str.length; i++)&#123;</div><div class="line">		timeout = <span class="built_in">set</span>Timeout(<span class="built_in">set</span>TimeoutCallback, i * self.options.letterDelay, i);</div><div class="line">		self.timeouts.push(timeout);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//</div><div class="line">	<span class="keyword">function</span> <span class="built_in">set</span>TimeoutCallback(index)&#123;</div><div class="line">		//index == str.length - 1 便是显示到了一个text的最后的一个字符</div><div class="line">		self.el.setAttribute(<span class="string">'placeholder'</span>, str.substring(0, index + 1) + (index === str.length - 1 || !self.options.showCursor ? <span class="string">''</span> : self.options.cursor));</div><div class="line">		<span class="keyword">if</span>(index == str.length - 1)&#123;</div><div class="line">			callback();  //一个text显示完整后,回调,设置下一个text的</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//失去焦点之后触发,设置为原来的默认值, 并且清空定时器</div><div class="line">PlaceHolder.prototype.cleanUp = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	// Stop timeouts</div><div class="line">	<span class="keyword">for</span> (var i = this.timeouts.length; i--;) &#123;</div><div class="line">		clearTimeout(this.timeouts[i]);</div><div class="line">	&#125;</div><div class="line">	this.el.setAttribute(<span class="string">'placeholder'</span>, this.originalPlaceholder);</div><div class="line">	this.timeouts.length = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="声明PlaceHolder对象函数-判断是否支持placeholder属性-并new之前的构造函数-并抛出该函数对象"><a href="#声明PlaceHolder对象函数-判断是否支持placeholder属性-并new之前的构造函数-并抛出该函数对象" class="headerlink" title="声明PlaceHolder对象函数,判断是否支持placeholder属性,并new之前的构造函数, 并抛出该函数对象"></a>声明PlaceHolder对象函数,判断是否支持placeholder属性,并new之前的构造函数, 并抛出该函数对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var splaceholder = <span class="keyword">function</span>(params)&#123;</div><div class="line">	<span class="keyword">if</span>(!isPlaceHolderSupported)&#123;</div><div class="line">		<span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	new PlaceHolder(params.el, params.texts, params.options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>( typeof exports === <span class="string">'object'</span> )  &#123;</div><div class="line">	module.exports = splaceholder;</div><div class="line">&#125;</div><div class="line">// AMD module</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>( typeof define === <span class="string">'function'</span> &amp;&amp; define.amd ) &#123;</div><div class="line">	define(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">		<span class="built_in">return</span> splaceholder;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">// 浏览器window对象</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">	window.splaceholder = splaceholder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好的,接下来我们只要在页面调用就好了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">""</span> placeholder=<span class="string">"colleague"</span> id=<span class="string">"colleague"</span>&gt;</div><div class="line"></div><div class="line">splaceholder(&#123;</div><div class="line">	el: colleague,</div><div class="line">	texts: [<span class="string">"caishuanglin"</span>, <span class="string">"linxianshen"</span>, <span class="string">"xinmencai"</span>],</div><div class="line">	options: &#123;</div><div class="line">		loop: <span class="literal">true</span>,</div><div class="line">		letterDelay: 100,</div><div class="line">		startOnFocus: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>嗯,自己动手试试吧.(ง •̀_•́)ง</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86   
    src=&quot;http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=1&amp;height=66&quot;&gt;  
&lt;/iframe&gt;  --&gt;
&lt;p&gt;看到一个轻量级js插件,蛮有意思的.(主要是上次出去面试有点受刺激,第四轮架构师大神,问的问题其实很基本,但是自己就是没答上来,真的挺可惜,不过面试题目还像也可以写一篇分享一下==…建议多去看看github上的各位大牛的代码,学习吧骚年)&lt;/p&gt;
&lt;h2 id=&quot;源码地址&quot;&gt;&lt;a href=&quot;#源码地址&quot; class=&quot;headerlink&quot; title=&quot;源码地址&quot;&gt;&lt;/a&gt;源码地址&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;superplaceholder.js&lt;/strong&gt;: &lt;a href=&quot;https://github.com/chinchang/superplaceholder.js&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-打字效果实现原理&quot;&gt;&lt;a href=&quot;#1-打字效果实现原理&quot; class=&quot;headerlink&quot; title=&quot;1.  打字效果实现原理&quot;&gt;&lt;/a&gt;1.  打字效果实现原理&lt;/h2&gt;&lt;p&gt;模拟打字效果的实现,其实就是主要是定时器的工作了,只要根据提供的&lt;strong&gt;texts&lt;/strong&gt;(placeholder值的数组),&lt;strong&gt;textDelay&lt;/strong&gt;(切换句子时的时间间隔),&lt;strong&gt;letterDelay&lt;/strong&gt;(每打一个字的时间间隔),定时给input元素setAttribute &lt;strong&gt;placeholder&lt;/strong&gt;属性.&lt;/p&gt;
&lt;p&gt;还要考虑到是否聚焦&lt;strong&gt;startOnFocus&lt;/strong&gt;的时候开始执行该打字效果,是否循环&lt;strong&gt;loop&lt;/strong&gt;,以及打字光标&lt;strong&gt;cursor&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://linxianshen.github.io/tags/javaScript/"/>
    
      <category term="placeholder" scheme="https://linxianshen.github.io/tags/placeholder/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://linxianshen.github.io/2017/03/16/hello-world/"/>
    <id>https://linxianshen.github.io/2017/03/16/hello-world/</id>
    <published>2017-03-16T09:04:57.000Z</published>
    <updated>2017-03-16T09:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
